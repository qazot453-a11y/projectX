from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from app.keyboards import get_main_keyboard, get_size_keyboard, get_matrices_list_keyboard
from app.convert import convert_to_2d
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏
from functions import matrix_det

router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞—Ç—Ä–∏—Ü
user_matrices = {}

class MatrixStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_size = State()
    waiting_for_rows = State()

@router.message(Command("start"))
async def start_command(message: Message):
    await message.answer(
        "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –º–∞—Ç—Ä–∏—Ü!\n\n"
        "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:\n"
        "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü\n"
        "‚Ä¢ –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –¥–µ—Ç–µ—Ä–º–∏–Ω–∞–Ω—Ç–∞\n"
        "‚Ä¢ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ç—Ä–∏—Ü\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
        reply_markup=get_main_keyboard(has_matrices=len(user_matrices) > 0)
    )

@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –º–∞—Ç—Ä–∏—Ü—É")
async def process_add_matrix(message: Message, state: FSMContext):
    await state.set_state(MatrixStates.waiting_for_name)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –º–∞—Ç—Ä–∏—Ü—ã:",
        reply_markup=ReplyKeyboardRemove()
    )

@router.message(F.text == "üìä –í—ã–≤–µ—Å—Ç–∏ –º–∞—Ç—Ä–∏—Ü—É")
async def process_show_matrix(message: Message):
    if not user_matrices:
        await message.answer("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–∞—Ç—Ä–∏—Ü.")
        return
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç—Ä–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
        reply_markup=get_matrices_list_keyboard(user_matrices, "show")
    )

@router.message(F.text == "üßÆ –í—ã—á–∏—Å–ª–∏—Ç—å –¥–µ—Ç–µ—Ä–º–∏–Ω–∞–Ω—Ç")
async def process_determinant(message: Message):
    if not user_matrices:
        await message.answer("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–∞—Ç—Ä–∏—Ü.")
        return
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç—Ä–∏—Ü—É –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∞–Ω—Ç–∞:",
        reply_markup=get_matrices_list_keyboard(user_matrices, "det")
    )

@router.message(MatrixStates.waiting_for_name)
async def process_matrix_name(message: Message, state: FSMContext):
    matrix_name = message.text.strip()
    
    await state.update_data(matrix_name=matrix_name)
    await state.set_state(MatrixStates.waiting_for_size)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –º–∞—Ç—Ä–∏—Ü—ã:",
        reply_markup=get_size_keyboard()
    )

@router.callback_query(F.data.startswith("size_"), MatrixStates.waiting_for_size)
async def process_size_selection(callback: CallbackQuery, state: FSMContext):
    size_data = callback.data.split('_')
    rows = int(size_data[1])
    cols = int(size_data[2])
    
    await state.update_data(
        rows=rows,
        cols=cols,
        current_row=0,
        matrix_data=[]
    )
    await state.set_state(MatrixStates.waiting_for_rows)
    
    await callback.message.answer(
        f"–í—ã–±—Ä–∞–Ω —Ä–∞–∑–º–µ—Ä: {rows}x{cols}\n"
        f"–í–≤–µ–¥–∏—Ç–µ {rows} —Å—Ç—Ä–æ–∫(—É/–∏) –º–∞—Ç—Ä–∏—Ü—ã.\n"
        f"–í–≤–µ–¥–∏—Ç–µ 1 —Å—Ç—Ä–æ–∫—É (—á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):"
    )
    await callback.answer()

@router.message(MatrixStates.waiting_for_rows)
async def process_row_input(message: Message, state: FSMContext):
    user_data = await state.get_data()
    rows = user_data['rows']
    cols = user_data['cols']
    current_row = user_data['current_row']
    matrix_data = user_data['matrix_data']
    matrix_name = user_data['matrix_name']
    
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–æ–¥ –≤ —á–∏—Å–ª–∞
        row_elements = list(map(float, message.text.split()))
        
        # –î–æ–ø–æ–ª–Ω—è–µ–º –Ω—É–ª—è–º–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        while len(row_elements) < cols:
            row_elements.append(0.0)
        
        # –û–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        row_elements = row_elements[:cols]
        
        matrix_data.extend(row_elements)
        matrix_data.append(';')  # –°–ø–µ—Ü—Å–∏–º–≤–æ–ª –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–æ–∫–∏
        
        current_row += 1
        
        await state.update_data(
            current_row=current_row,
            matrix_data=matrix_data
        )
        
        if current_row < rows:
            await message.answer(f"–í–≤–µ–¥–∏—Ç–µ {current_row + 1} —Å—Ç—Ä–æ–∫—É:")
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ç—Ä–∏—Ü—É
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ 10 –º–∞—Ç—Ä–∏—Ü
            if len(user_matrices) >= 10:
                # –£–¥–∞–ª—è–µ–º —Å–∞–º—É—é —Å—Ç–∞—Ä—É—é –º–∞—Ç—Ä–∏—Ü—É
                oldest_key = next(iter(user_matrices))
                del user_matrices[oldest_key]
            
            user_matrices[matrix_name] = matrix_data
            
            await message.answer(
                f"‚úÖ –ú–∞—Ç—Ä–∏—Ü–∞ '{matrix_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!",
                reply_markup=get_main_keyboard(has_matrices=len(user_matrices) > 0)
            )
            await state.clear()
            
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:")

@router.callback_query(F.data.startswith("show_"))
async def process_matrix_display(callback: CallbackQuery):
    matrix_name = callback.data.split('_')[1]
    
    if matrix_name not in user_matrices:
        await callback.answer("–ú–∞—Ç—Ä–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    matrix_data = user_matrices[matrix_name]
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –¥–≤—É–º–µ—Ä–Ω—ã–π –≤–∏–¥
    matrix_2d = convert_to_2d(matrix_data)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
    matrix_str = f"–ú–∞—Ç—Ä–∏—Ü–∞ '{matrix_name}':\n"
    for row in matrix_2d:
        matrix_str += "‚îÇ " + " ".join(f"{x:8.2f}" for x in row) + " ‚îÇ\n"
    
    await callback.message.answer(f"<pre>{matrix_str}</pre>", parse_mode='HTML')
    await callback.answer()

@router.callback_query(F.data.startswith("det_"))
async def process_determinant_calculation(callback: CallbackQuery):
    matrix_name = callback.data.split('_')[1]
    
    if matrix_name not in user_matrices:
        await callback.answer("–ú–∞—Ç—Ä–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    matrix_data = user_matrices[matrix_name]
    
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –¥–≤—É–º–µ—Ä–Ω—ã–π –≤–∏–¥
        matrix_2d = convert_to_2d(matrix_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∞—Ç—Ä–∏—Ü–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω–∞—è
        if len(matrix_2d) != len(matrix_2d[0]):
            await callback.message.answer(
                f"‚ùå –ú–∞—Ç—Ä–∏—Ü–∞ '{matrix_name}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π! "
                f"–†–∞–∑–º–µ—Ä: {len(matrix_2d)}x{len(matrix_2d[0])}\n"
                f"–î–µ—Ç–µ—Ä–º–∏–Ω–∞–Ω—Ç –º–æ–∂–Ω–æ –≤—ã—á–∏—Å–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–∞—Ç—Ä–∏—Ü."
            )
            await callback.answer()
            return
        
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–µ—Ç–µ—Ä–º–∏–Ω–∞–Ω—Ç
        determinant = matrix_det(matrix_2d)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –º–∞—Ç—Ä–∏—Ü—ã
        matrix_str = f"–ú–∞—Ç—Ä–∏—Ü–∞ '{matrix_name}':\n"
        for row in matrix_2d:
            matrix_str += "‚îÇ " + " ".join(f"{x:8.2f}" for x in row) + " ‚îÇ\n"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await callback.message.answer(
            f"<pre>{matrix_str}</pre>\n"
            f"üî¢ –î–µ—Ç–µ—Ä–º–∏–Ω–∞–Ω—Ç –º–∞—Ç—Ä–∏—Ü—ã '{matrix_name}':\n"
            f"<b>det = {determinant:.6f}</b>",
            parse_mode='HTML'
        )
        
    except Exception as e:
        await callback.message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ –¥–µ—Ç–µ—Ä–º–∏–Ω–∞–Ω—Ç–∞ –º–∞—Ç—Ä–∏—Ü—ã '{matrix_name}': {str(e)}"
        )
    
    await callback.answer()