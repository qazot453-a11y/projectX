from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from app.keyboards import (
    get_main_keyboard, get_size_keyboard, get_matrices_list_keyboard, 
    get_delete_matrices_keyboard, get_operations_keyboard, get_save_matrix_keyboard
)
from app.convert import convert_to_2d, format_number
from functions import (
    matrix_det, matrix_multiply_by_scalar, matrix_subtraction, matrix_add,
    matrix_is_singular, matrix_transpose, matrix_algebraic_complement, matrix_inverse,
    matrix_multiply, matrix_rank
)
import re

router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞—Ç—Ä–∏—Ü –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_databases = {}

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –¥–≤—É–º—è –º–∞—Ç—Ä–∏—Ü–∞–º–∏
operation_storage = {}

class MatrixStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_size = State()
    waiting_for_rows = State()
    waiting_for_manual_size = State()
    waiting_for_operation = State()
    waiting_for_scalar = State()
    waiting_for_first_matrix = State()
    waiting_for_second_matrix = State()
    waiting_for_save_name = State()

def get_user_matrices(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –º–∞—Ç—Ä–∏—Ü –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞–µ—Ç –µ—Å–ª–∏ –Ω–µ—Ç"""
    if user_id not in user_databases:
        user_databases[user_id] = {}
    return user_databases[user_id]

def save_user_matrix(user_id, matrix_name, matrix_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–∞—Ç—Ä–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –≤ 10 –º–∞—Ç—Ä–∏—Ü"""
    user_matrices = get_user_matrices(user_id)
    
    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ 10 –º–∞—Ç—Ä–∏—Ü
    if len(user_matrices) >= 10:
        # –£–¥–∞–ª—è–µ–º —Å–∞–º—É—é —Å—Ç–∞—Ä—É—é –º–∞—Ç—Ä–∏—Ü—É
        oldest_key = next(iter(user_matrices))
        del user_matrices[oldest_key]
    
    user_matrices[matrix_name] = matrix_data
    return user_matrices

def format_matrix_output(matrix_2d, name="–†–µ–∑—É–ª—å—Ç–∞—Ç"):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –º–∞—Ç—Ä–∏—Ü—É –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —á–∏—Å–µ–ª"""
    matrix_str = f"<b>–ú–∞—Ç—Ä–∏—Ü–∞ '{name}':</b>\n"
    matrix_str += "<pre>"
    
    # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
    max_width = 0
    for row in matrix_2d:
        for element in row:
            formatted = format_number(element)
            max_width = max(max_width, len(formatted))
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
    for row in matrix_2d:
        formatted_row = []
        for element in row:
            formatted_element = format_number(element)
            # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é
            formatted_row.append(formatted_element.rjust(max_width))
        
        matrix_str += "‚îÇ " + " ".join(formatted_row) + " ‚îÇ\n"
    
    matrix_str += "</pre>"
    return matrix_str

def convert_to_storage_format(matrix_2d):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –¥–≤—É–º–µ—Ä–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É –≤ —Ñ–æ—Ä–º–∞—Ç —Ö—Ä–∞–Ω–µ–Ω–∏—è"""
    storage_data = []
    for row in matrix_2d:
        storage_data.extend(row)
        storage_data.append(';')
    return storage_data

def sanitize_matrix_name(name):
    """–û—á–∏—â–∞–µ—Ç –∏–º—è –º–∞—Ç—Ä–∏—Ü—ã –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    sanitized = re.sub(r'[^\w]', '_', name)
    # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    sanitized = re.sub(r'_+', '_', sanitized)
    # –£–±–∏—Ä–∞–µ–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
    sanitized = sanitized.strip('_')
    return sanitized

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def start_command(message: Message):
    user_id = message.from_user.id
    user_matrices = get_user_matrices(user_id)
    
    await message.answer(
        f"ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –º–∞—Ç—Ä–∏—Ü, {message.from_user.first_name}!\n\n"
        "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:\n"
        "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü\n"
        "‚Ä¢ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –º–∞—Ç—Ä–∏—Ü–∞–º–∏\n"
        "‚Ä¢ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ç—Ä–∏—Ü\n"
        "‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü\n\n"
        f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –º–∞—Ç—Ä–∏—Ü: {len(user_matrices)}/10\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/my_matrices - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –º–∞—Ç—Ä–∏—Ü—ã\n"
        "/delete_matrix - —É–¥–∞–ª–∏—Ç—å –º–∞—Ç—Ä–∏—Ü—É\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
        reply_markup=get_main_keyboard(has_matrices=len(user_matrices) > 0)
    )

@router.message(Command("my_matrices"))
async def show_my_matrices(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –º–∞—Ç—Ä–∏—Ü–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    user_matrices = get_user_matrices(user_id)
    
    if not user_matrices:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–∞—Ç—Ä–∏—Ü.")
        return
    
    matrices_list = "üìä –í–∞—à–∏ –º–∞—Ç—Ä–∏—Ü—ã:\n\n"
    for i, (name, data) in enumerate(user_matrices.items(), 1):
        matrix_2d = convert_to_2d(data)
        rows = len(matrix_2d)
        cols = len(matrix_2d[0]) if matrix_2d else 0
        matrices_list += f"{i}. {name} - —Ä–∞–∑–º–µ—Ä: {rows}x{cols}\n"
    
    matrices_list += f"\n–í—Å–µ–≥–æ –º–∞—Ç—Ä–∏—Ü: {len(user_matrices)}/10"
    await message.answer(matrices_list)

@router.message(Command("delete_matrix"))
async def delete_matrix_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Ç—Ä–∏—Ü"""
    user_id = message.from_user.id
    user_matrices = get_user_matrices(user_id)
    
    if not user_matrices:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–∞—Ç—Ä–∏—Ü –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç—Ä–∏—Ü—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=get_delete_matrices_keyboard(user_matrices)
    )

@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –º–∞—Ç—Ä–∏—Ü—É")
async def process_add_matrix(message: Message, state: FSMContext):
    await state.set_state(MatrixStates.waiting_for_name)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –º–∞—Ç—Ä–∏—Ü—ã:",
        reply_markup=ReplyKeyboardRemove()
    )

@router.message(F.text == "üìä –í—ã–≤–µ—Å—Ç–∏ –º–∞—Ç—Ä–∏—Ü—É")
async def process_show_matrix(message: Message):
    user_id = message.from_user.id
    user_matrices = get_user_matrices(user_id)
    
    if not user_matrices:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–∞—Ç—Ä–∏—Ü.")
        return
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç—Ä–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
        reply_markup=get_matrices_list_keyboard(user_matrices, "show")
    )

@router.message(F.text == "üßÆ –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –º–∞—Ç—Ä–∏—Ü–∞–º–∏")
async def show_operations(message: Message):
    user_id = message.from_user.id
    user_matrices = get_user_matrices(user_id)
    
    if not user_matrices:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–∞—Ç—Ä–∏—Ü.")
        return
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:",
        reply_markup=get_operations_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
@router.callback_query(F.data.startswith("op_"))
async def process_operation_selection(callback: CallbackQuery, state: FSMContext):
    operation = callback.data.replace("op_", "")
    user_id = callback.from_user.id
    
    if operation == "back":
        await callback.message.answer(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_keyboard(has_matrices=len(get_user_matrices(user_id)) > 0)
        )
        await callback.answer()
        return
    
    await state.update_data(current_operation=operation)
    
    if operation in ["add", "sub", "multiply"]:
        # –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –¥–≤—É–º—è –º–∞—Ç—Ä–∏—Ü–∞–º–∏
        await state.set_state(MatrixStates.waiting_for_first_matrix)
        operation_names = {
            "add": "–°–ª–æ–∂–µ–Ω–∏–µ",
            "sub": "–í—ã—á–∏—Ç–∞–Ω–∏–µ", 
            "multiply": "–£–º–Ω–æ–∂–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü"
        }
        await callback.message.answer(
            f"–í—ã–±—Ä–∞–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è: {operation_names[operation]}\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—É—é –º–∞—Ç—Ä–∏—Ü—É:",
            reply_markup=get_matrices_list_keyboard(get_user_matrices(user_id), "select_first")
        )
    elif operation == "scalar":
        # –£–º–Ω–æ–∂–µ–Ω–∏–µ –Ω–∞ —Å–∫–∞–ª—è—Ä
        await state.set_state(MatrixStates.waiting_for_first_matrix)
        await callback.message.answer(
            "–í—ã–±—Ä–∞–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è: –£–º–Ω–æ–∂–µ–Ω–∏–µ –Ω–∞ —Å–∫–∞–ª—è—Ä\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç—Ä–∏—Ü—É:",
            reply_markup=get_matrices_list_keyboard(get_user_matrices(user_id), "select_scalar")
        )
    else:
        # –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –æ–¥–Ω–æ–π –º–∞—Ç—Ä–∏—Ü–µ–π
        await state.set_state(MatrixStates.waiting_for_first_matrix)
        operation_names = {
            "det": "–î–µ—Ç–µ—Ä–º–∏–Ω–∞–Ω—Ç",
            "transpose": "–¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
            "inverse": "–û–±—Ä–∞—Ç–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞",
            "complement": "–ê–ª–≥–µ–±—Ä–∞–∏—á–µ—Å–∫–æ–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ",
            "singular": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–∏–Ω–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å",
            "rank": "–†–∞–Ω–≥ –º–∞—Ç—Ä–∏—Ü—ã"
        }
        await callback.message.answer(
            f"–í—ã–±—Ä–∞–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è: {operation_names[operation]}\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç—Ä–∏—Ü—É:",
            reply_markup=get_matrices_list_keyboard(get_user_matrices(user_id), "select_single")
        )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –º–∞—Ç—Ä–∏—Ü –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π
@router.callback_query(F.data.startswith("select_first_"), MatrixStates.waiting_for_first_matrix)
async def process_first_matrix_selection(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    matrix_name = callback.data.replace("select_first_", "")
    user_matrices = get_user_matrices(user_id)
    
    if matrix_name not in user_matrices:
        await callback.answer("–ú–∞—Ç—Ä–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—É—é –º–∞—Ç—Ä–∏—Ü—É
    operation_storage[user_id] = {
        "first_matrix": matrix_name,
        "first_matrix_data": user_matrices[matrix_name]
    }
    
    await state.set_state(MatrixStates.waiting_for_second_matrix)
    
    user_data = await state.get_data()
    operation = user_data.get("current_operation")
    operation_names = {
        "add": "—Å–ª–æ–∂–µ–Ω–∏—è",
        "sub": "–≤—ã—á–∏—Ç–∞–Ω–∏—è",
        "multiply": "—É–º–Ω–æ–∂–µ–Ω–∏—è"
    }
    
    await callback.message.answer(
        f"–í—ã–±—Ä–∞–Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞: {matrix_name}\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ç–æ—Ä—É—é –º–∞—Ç—Ä–∏—Ü—É –¥–ª—è {operation_names[operation]}:",
        reply_markup=get_matrices_list_keyboard(user_matrices, "select_second", matrix_name)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("select_second_"), MatrixStates.waiting_for_second_matrix)
async def process_second_matrix_selection(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    matrix_name = callback.data.replace("select_second_", "")
    user_data = await state.get_data()
    operation = user_data.get("current_operation")
    user_matrices = get_user_matrices(user_id)
    
    if matrix_name not in user_matrices:
        await callback.answer("–ú–∞—Ç—Ä–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±–µ–∏—Ö –º–∞—Ç—Ä–∏—Ü
    first_matrix_name = operation_storage[user_id]["first_matrix"]
    first_matrix_data = operation_storage[user_id]["first_matrix_data"]
    second_matrix_data = user_matrices[matrix_name]
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
    try:
        matrix1_2d = convert_to_2d(first_matrix_data)
        matrix2_2d = convert_to_2d(second_matrix_data)
        
        if operation == "add":
            result = matrix_add(matrix1_2d, matrix2_2d)
            result_name = f"–°—É–º–º–∞_{first_matrix_name}_{matrix_name}"
        elif operation == "sub":
            result = matrix_subtraction(matrix1_2d, matrix2_2d)
            result_name = f"–†–∞–∑–Ω–æ—Å—Ç—å_{first_matrix_name}_{matrix_name}"
        elif operation == "multiply":
            result = matrix_multiply(matrix1_2d, matrix2_2d)
            result_name = f"–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ_{first_matrix_name}_{matrix_name}"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_str = format_matrix_output(result, result_name)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        operation_storage[user_id]["result"] = result
        operation_storage[user_id]["result_name"] = result_name
        
        await callback.message.answer(
            result_str,
            parse_mode='HTML',
            reply_markup=get_save_matrix_keyboard()
        )
        
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏: {str(e)}")
    
    await state.clear()
    await callback.answer()

@router.callback_query(F.data.startswith("select_single_"), MatrixStates.waiting_for_first_matrix)
async def process_single_matrix_selection(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    matrix_name = callback.data.replace("select_single_", "")
    user_data = await state.get_data()
    operation = user_data.get("current_operation")
    user_matrices = get_user_matrices(user_id)
    
    if matrix_name not in user_matrices:
        await callback.answer("–ú–∞—Ç—Ä–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    matrix_data = user_matrices[matrix_name]
    
    try:
        matrix_2d = convert_to_2d(matrix_data)
        
        if operation == "det":
            if len(matrix_2d) != len(matrix_2d[0]):
                await callback.message.answer("‚ùå –ú–∞—Ç—Ä–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∞–Ω—Ç–∞!")
                await state.clear()
                return
            
            result = matrix_det(matrix_2d)
            await callback.message.answer(
                f"üî¢ –î–µ—Ç–µ—Ä–º–∏–Ω–∞–Ω—Ç –º–∞—Ç—Ä–∏—Ü—ã '{matrix_name}':\n"
                f"<b>det = {format_number(result)}</b>",
                parse_mode='HTML'
            )
            
        elif operation == "rank":
            result = matrix_rank(matrix_2d)
            await callback.message.answer(
                f"üìà –†–∞–Ω–≥ –º–∞—Ç—Ä–∏—Ü—ã '{matrix_name}':\n"
                f"<b>rank = {result}</b>",
                parse_mode='HTML'
            )
            
        elif operation == "transpose":
            result = matrix_transpose(matrix_2d)
            result_str = format_matrix_output(result, f"–¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è_{matrix_name}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            operation_storage[user_id] = {
                "result": result,
                "result_name": f"–¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è_{matrix_name}"
            }
            
            await callback.message.answer(
                result_str,
                parse_mode='HTML',
                reply_markup=get_save_matrix_keyboard()
            )
            
        elif operation == "inverse":
            result = matrix_inverse(matrix_2d)
            result_str = format_matrix_output(result, f"–û–±—Ä–∞—Ç–Ω–∞—è_{matrix_name}")
            
            operation_storage[user_id] = {
                "result": result,
                "result_name": f"–û–±—Ä–∞—Ç–Ω–∞—è_{matrix_name}"
            }
            
            await callback.message.answer(
                result_str,
                parse_mode='HTML',
                reply_markup=get_save_matrix_keyboard()
            )
            
        elif operation == "complement":
            result = matrix_algebraic_complement(matrix_2d)
            result_str = format_matrix_output(result, f"–ê–ª–≥–µ–±—Ä–∞–∏—á–µ—Å–∫–æ–µ_–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ_{matrix_name}")
            
            operation_storage[user_id] = {
                "result": result,
                "result_name": f"–ê–ª–≥–µ–±—Ä–∞–∏—á–µ—Å–∫–æ–µ_–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ_{matrix_name}"
            }
            
            await callback.message.answer(
                result_str,
                parse_mode='HTML',
                reply_markup=get_save_matrix_keyboard()
            )
            
        elif operation == "singular":
            is_singular = matrix_is_singular(matrix_2d)
            status = "—Å–∏–Ω–≥—É–ª—è—Ä–Ω–∞" if is_singular else "–Ω–µ —Å–∏–Ω–≥—É–ª—è—Ä–Ω–∞"
            await callback.message.answer(
                f"üîç –ú–∞—Ç—Ä–∏—Ü–∞ '{matrix_name}' {status}"
            )
        
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏: {str(e)}")
    
    await state.clear()
    await callback.answer()

@router.callback_query(F.data.startswith("select_scalar_"), MatrixStates.waiting_for_first_matrix)
async def process_scalar_matrix_selection(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    matrix_name = callback.data.replace("select_scalar_", "")
    user_matrices = get_user_matrices(user_id)
    
    if matrix_name not in user_matrices:
        await callback.answer("–ú–∞—Ç—Ä–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É
    operation_storage[user_id] = {
        "matrix_name": matrix_name,
        "matrix_data": user_matrices[matrix_name]
    }
    
    await state.set_state(MatrixStates.waiting_for_scalar)
    await callback.message.answer(
        f"–í—ã–±—Ä–∞–Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞: {matrix_name}\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å–∫–∞–ª—è—Ä (—á–∏—Å–ª–æ) –¥–ª—è —É–º–Ω–æ–∂–µ–Ω–∏—è:"
    )
    await callback.answer()

@router.message(MatrixStates.waiting_for_scalar)
async def process_scalar_input(message: Message, state: FSMContext):
    user_id = message.from_user.id
    
    try:
        scalar = float(message.text)
        
        matrix_name = operation_storage[user_id]["matrix_name"]
        matrix_data = operation_storage[user_id]["matrix_data"]
        
        matrix_2d = convert_to_2d(matrix_data)
        result = matrix_multiply_by_scalar(matrix_2d, scalar)
        result_name = f"–£–º–Ω–æ–∂–µ–Ω–Ω–∞—è_–Ω–∞_{format_number(scalar)}_{matrix_name}"
        
        result_str = format_matrix_output(result, result_name)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        operation_storage[user_id]["result"] = result
        operation_storage[user_id]["result_name"] = result_name
        
        await message.answer(
            result_str,
            parse_mode='HTML',
            reply_markup=get_save_matrix_keyboard()
        )
        
    except ValueError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
@router.callback_query(F.data == "save_result")
async def process_save_request(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    user_id = callback.from_user.id
    
    if user_id not in operation_storage or "result" not in operation_storage[user_id]:
        await callback.answer("–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    await state.set_state(MatrixStates.waiting_for_save_name)
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:"
    )
    await callback.answer()

@router.message(MatrixStates.waiting_for_save_name)
async def process_save_name_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    user_id = message.from_user.id
    matrix_name = message.text.strip()
    
    if user_id not in operation_storage or "result" not in operation_storage[user_id]:
        await message.answer("–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        await state.clear()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –º–∞—Ç—Ä–∏—Ü–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
    user_matrices = get_user_matrices(user_id)
    if matrix_name in user_matrices:
        await message.answer(
            f"–ú–∞—Ç—Ä–∏—Ü–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{matrix_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. "
            "–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ç—Ä–∏—Ü—É
    result = operation_storage[user_id]["result"]
    storage_data = convert_to_storage_format(result)
    
    save_user_matrix(user_id, matrix_name, storage_data)
    user_matrices = get_user_matrices(user_id)
    
    await message.answer(
        f"‚úÖ –ú–∞—Ç—Ä–∏—Ü–∞ '{matrix_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n"
        f"–í—Å–µ–≥–æ –º–∞—Ç—Ä–∏—Ü: {len(user_matrices)}/10",
        reply_markup=get_main_keyboard(has_matrices=len(user_matrices) > 0)
    )
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    if user_id in operation_storage:
        del operation_storage[user_id]
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–π
@router.callback_query(F.data == "operation_cancel")
async def process_operation_cancel(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback.answer()

@router.callback_query(F.data == "delete_cancel")
async def process_delete_cancel(callback: CallbackQuery):
    await callback.message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.answer()

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

@router.message(MatrixStates.waiting_for_name)
async def process_matrix_name(message: Message, state: FSMContext):
    matrix_name = message.text.strip()
    user_id = message.from_user.id
    user_matrices = get_user_matrices(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –º–∞—Ç—Ä–∏—Ü–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
    if matrix_name in user_matrices:
        await message.answer(
            f"–ú–∞—Ç—Ä–∏—Ü–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{matrix_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. "
            "–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"
        )
        return
    
    await state.update_data(matrix_name=matrix_name)
    await state.set_state(MatrixStates.waiting_for_size)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –º–∞—Ç—Ä–∏—Ü—ã (–æ—Ç 1x1 –¥–æ 5x5) –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:",
        reply_markup=get_size_keyboard()
    )

@router.callback_query(F.data.startswith("size_"), MatrixStates.waiting_for_size)
async def process_size_selection(callback: CallbackQuery, state: FSMContext):
    size_data = callback.data.split('_')
    rows = int(size_data[1])
    cols = int(size_data[2])
    
    await set_matrix_size(state, rows, cols)
    await callback.message.answer(
        f"–í—ã–±—Ä–∞–Ω —Ä–∞–∑–º–µ—Ä: {rows}x{cols}\n"
        f"–í–≤–µ–¥–∏—Ç–µ {rows} —Å—Ç—Ä–æ–∫(—É/–∏) –º–∞—Ç—Ä–∏—Ü—ã.\n"
        f"–í–≤–µ–¥–∏—Ç–µ 1 —Å—Ç—Ä–æ–∫—É (—á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):"
    )
    await callback.answer()

@router.callback_query(F.data == "manual_size", MatrixStates.waiting_for_size)
async def process_manual_size_request(callback: CallbackQuery, state: FSMContext):
    await state.set_state(MatrixStates.waiting_for_manual_size)
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –º–∞—Ç—Ä–∏—Ü—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<—Å—Ç—Ä–æ–∫–∏> <—Å—Ç–æ–ª–±—Ü—ã>\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 3 4\n"
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10x10"
    )
    await callback.answer()

@router.message(MatrixStates.waiting_for_manual_size)
async def process_manual_size_input(message: Message, state: FSMContext):
    try:
        # –†–∞–∑–±–∏–≤–∞–µ–º –≤–≤–æ–¥ –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏
        parts = message.text.strip().split()
        if len(parts) != 2:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 3 4"
            )
            return
        
        rows = int(parts[0])
        cols = int(parts[1])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç—å —Ä–∞–∑–º–µ—Ä–æ–≤
        if rows < 1 or cols < 1 or rows > 10 or cols > 10:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä! –°—Ç—Ä–æ–∫–∏ –∏ —Å—Ç–æ–ª–±—Ü—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 1 –¥–æ 10.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
            )
            return
        
        await set_matrix_size(state, rows, cols)
        await message.answer(
            f"–í—ã–±—Ä–∞–Ω —Ä–∞–∑–º–µ—Ä: {rows}x{cols}\n"
            f"–í–≤–µ–¥–∏—Ç–µ {rows} —Å—Ç—Ä–æ–∫(—É/–∏) –º–∞—Ç—Ä–∏—Ü—ã.\n"
            f"–í–≤–µ–¥–∏—Ç–µ 1 —Å—Ç—Ä–æ–∫—É (—á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):"
        )
        
    except ValueError:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 3 4"
        )

async def set_matrix_size(state: FSMContext, rows: int, cols: int):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –º–∞—Ç—Ä–∏—Ü—ã –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤–≤–æ–¥—É —Å—Ç—Ä–æ–∫"""
    await state.update_data(
        rows=rows,
        cols=cols,
        current_row=0,
        matrix_data=[]
    )
    await state.set_state(MatrixStates.waiting_for_rows)

@router.message(MatrixStates.waiting_for_rows)
async def process_row_input(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_data = await state.get_data()
    rows = user_data['rows']
    cols = user_data['cols']
    current_row = user_data['current_row']
    matrix_data = user_data['matrix_data']
    matrix_name = user_data['matrix_name']
    
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–æ–¥ –≤ —á–∏—Å–ª–∞
        row_elements = list(map(float, message.text.split()))
        
        # –î–æ–ø–æ–ª–Ω—è–µ–º –Ω—É–ª—è–º–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        while len(row_elements) < cols:
            row_elements.append(0.0)
        
        # –û–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        row_elements = row_elements[:cols]
        
        matrix_data.extend(row_elements)
        matrix_data.append(';')  # –°–ø–µ—Ü—Å–∏–º–≤–æ–ª –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–æ–∫–∏
        
        current_row += 1
        
        await state.update_data(
            current_row=current_row,
            matrix_data=matrix_data
        )
        
        if current_row < rows:
            await message.answer(f"–í–≤–µ–¥–∏—Ç–µ {current_row + 1} —Å—Ç—Ä–æ–∫—É:")
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ç—Ä–∏—Ü—É
            save_user_matrix(user_id, matrix_name, matrix_data)
            user_matrices = get_user_matrices(user_id)
            
            await message.answer(
                f"‚úÖ –ú–∞—Ç—Ä–∏—Ü–∞ '{matrix_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n"
                f"–†–∞–∑–º–µ—Ä: {rows}x{cols}\n"
                f"–í—Å–µ–≥–æ –º–∞—Ç—Ä–∏—Ü: {len(user_matrices)}/10",
                reply_markup=get_main_keyboard(has_matrices=len(user_matrices) > 0)
            )
            await state.clear()
            
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:")

@router.callback_query(F.data.startswith("show_"))
async def process_matrix_display(callback: CallbackQuery):
    user_id = callback.from_user.id
    user_matrices = get_user_matrices(user_id)
    matrix_name = callback.data.split('_')[1]
    
    if matrix_name not in user_matrices:
        await callback.answer("–ú–∞—Ç—Ä–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    matrix_data = user_matrices[matrix_name]
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –¥–≤—É–º–µ—Ä–Ω—ã–π –≤–∏–¥
    matrix_2d = convert_to_2d(matrix_data)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
    matrix_str = format_matrix_output(matrix_2d, matrix_name)
    
    await callback.message.answer(matrix_str, parse_mode='HTML')
    await callback.answer()

@router.callback_query(F.data.startswith("delete_"))
async def process_matrix_deletion(callback: CallbackQuery):
    user_id = callback.from_user.id
    user_matrices = get_user_matrices(user_id)
    
    if callback.data == "delete_cancel":
        await callback.message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await callback.answer()
        return
    
    matrix_name = callback.data.split('_')[1]
    
    if matrix_name not in user_matrices:
        await callback.answer("–ú–∞—Ç—Ä–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    # –£–¥–∞–ª—è–µ–º –º–∞—Ç—Ä–∏—Ü—É
    del user_matrices[matrix_name]
    
    await callback.message.answer(
        f"‚úÖ –ú–∞—Ç—Ä–∏—Ü–∞ '{matrix_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!\n"
        f"–û—Å—Ç–∞–ª–æ—Å—å –º–∞—Ç—Ä–∏—Ü: {len(user_matrices)}/10",
        reply_markup=get_main_keyboard(has_matrices=len(user_matrices) > 0)
    )
    await callback.answer()